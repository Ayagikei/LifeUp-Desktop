name: Build Compose Desktop App

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
          - os: windows-latest
            target: windows
          - os: macos-latest
            target: macos-x64
            gradle-args: "-Pcompose.desktop.mac.target=x64"
          - os: macos-latest
            target: macos-arm64
            gradle-args: "-Pcompose.desktop.mac.target=arm64"
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Grant execute permission for gradlew
        if: runner.os != 'Windows'
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew packageDistributionForCurrentOS ${{ matrix.gradle-args }}

      # 添加文件列表步骤
      - name: List files
        run: ls -R composeApp/build/compose/binaries/main/

      - name: Upload Windows artifact
        if: matrix.target == 'windows'
        uses: actions/upload-artifact@v3
        with:
          name: windows-distribution
          path: composeApp/build/compose/binaries/main/msi/*.msi

      - name: Upload macOS x64 artifact
        if: matrix.target == 'macos-x64'
        uses: actions/upload-artifact@v3
        with:
          name: macos-x64-distribution
          path: composeApp/build/compose/binaries/main/dmg/*.dmg

      - name: Upload macOS ARM64 artifact
        if: matrix.target == 'macos-arm64'
        uses: actions/upload-artifact@v3
        with:
          name: macos-arm64-distribution
          path: composeApp/build/compose/binaries/main/dmg/*.dmg

      - name: Upload Linux artifact
        if: matrix.target == 'linux'
        uses: actions/upload-artifact@v3
        with:
          name: linux-distribution
          path: composeApp/build/compose/binaries/main/deb/*.deb

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      # 下载构建产物
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist
      
      # 检查下载的文件
      - name: List downloaded files
        run: ls -R dist/
      
      # 获取版本号
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      # 准备发布文件
      - name: Prepare release files
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          mkdir release
          
          # 复制并重命名文件
          find dist/windows-distribution -name "*.msi" -exec cp {} release/LifeUp-Desktop-${VERSION}-windows.msi \;
          find dist/macos-x64-distribution -name "*.dmg" -exec cp {} release/LifeUp-Desktop-${VERSION}-macos-x64.dmg \;
          find dist/macos-arm64-distribution -name "*.dmg" -exec cp {} release/LifeUp-Desktop-${VERSION}-macos-arm64.dmg \;
          find dist/linux-distribution -name "*.deb" -exec cp {} release/lifeup-desktop_${VERSION}_amd64.deb \;
          
          echo "Release contents:"
          ls -la release/
      
      # 创建 Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: true
          files: release/*
          body: |
            ## Compose Desktop Application Release ${{ steps.get_version.outputs.VERSION }}
            
            ### Downloads
            - Windows: LifeUp Desktop.msi
            - macOS Intel (x64): LifeUp-Desktop-x64.dmg
            - macOS Apple Silicon (ARM64): LifeUp-Desktop-arm64.dmg
            - Linux: lifeup-desktop.deb